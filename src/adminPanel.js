// Arquivo: src/adminPanel.js - Sistema Administrativo

import { supabase } from './supabaseClient.js';
import { gerarEDownloadPDFRodada } from './pdfService.js';

// --- VARI√ÅVEIS GLOBAIS ---
let IS_ADMIN = false;
let ADMIN_DATA = null;

// ========================================================================
// 1. VERIFICA√á√ÉO DE PERMISS√ïES ADMIN
// ========================================================================

async function verificarPermissoesAdmin() {
  try {
    console.log('üîç Verificando permiss√µes de administrador...');
    
    // Chamar fun√ß√£o do Supabase para verificar se √© admin
    const { data, error } = await supabase.rpc('get_admin_data');
    
    if (error) {
      console.error('‚ùå Erro ao verificar permiss√µes admin:', error);
      return false;
    }
    
    if (data && data.length > 0 && data[0].is_admin) {
      IS_ADMIN = true;
      ADMIN_DATA = data[0];
      console.log('‚úÖ Usu√°rio √© administrador:', ADMIN_DATA);
      
      // Mostrar bot√£o admin no menu
      const navAdmin = document.getElementById('nav-admin');
      if (navAdmin) {
        navAdmin.classList.remove('hidden');
      }
      
      return true;
    } else {
      console.log('‚ùå Usu√°rio n√£o √© administrador');
      IS_ADMIN = false;
      ADMIN_DATA = null;
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de admin:', error);
    return false;
  }
}

// ========================================================================
// 2. INICIALIZA√á√ÉO DO PAINEL ADMIN
// ========================================================================

async function inicializarPainelAdmin() {
  if (!IS_ADMIN) {
    console.log('‚ùå Acesso negado: usu√°rio n√£o √© administrador');
    return;
  }
  
  console.log('üîß Inicializando painel administrativo...');
  
  // Configurar event listeners
  configurarEventListenersAdmin();
  
  // Carregar dashboard inicial
  await carregarDashboardAdmin();
}

function configurarEventListenersAdmin() {
  // Bot√µes de gest√£o de usu√°rios
  document.getElementById('btn-listar-usuarios')?.addEventListener('click', listarUsuarios);
  
  // Bot√µes de gest√£o de rodadas
  document.getElementById('btn-listar-rodadas')?.addEventListener('click', listarRodadas);
  document.getElementById('btn-finalizar-rodada-admin')?.addEventListener('click', finalizarRodadaForcado);
  document.getElementById('btn-gerar-pdf-rodadas')?.addEventListener('click', mostrarModalSelecionarRodadaPDF);
  
  // Bot√µes de gest√£o de conte√∫do
  document.getElementById('btn-listar-pratos')?.addEventListener('click', listarPratos);
  
  // Bot√µes de manuten√ß√£o
  document.getElementById('btn-recalcular-pontos')?.addEventListener('click', recalcularPontos);
  document.getElementById('btn-zerar-dados-usuarios')?.addEventListener('click', zerarDadosUsuarios);
  document.getElementById('btn-limpar-dados')?.addEventListener('click', limparDados);
  
  // Bot√µes do modal PDF
  document.getElementById('btn-cancelar-pdf')?.addEventListener('click', fecharModalPDF);
}

// ========================================================================
// 3. DASHBOARD ADMINISTRATIVO
// ========================================================================

async function carregarDashboardAdmin() {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üìä Carregando dashboard administrativo...');
    
    // Buscar estat√≠sticas do dashboard
    const { data: stats, error } = await supabase
      .from('vw_admin_dashboard')
      .select('*')
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao carregar dashboard:', error);
      mostrarStatusAdmin('‚ùå Erro ao carregar estat√≠sticas', 'error');
      return;
    }
    
    // Renderizar estat√≠sticas
    renderizarDashboardStats(stats);
    
  } catch (error) {
    console.error('‚ùå Erro no dashboard admin:', error);
    mostrarStatusAdmin('‚ùå Erro no dashboard', 'error');
  }
}

function renderizarDashboardStats(stats) {
  const container = document.getElementById('admin-dashboard-stats');
  if (!container) return;
  
  container.innerHTML = `
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-blue-600">${stats.total_usuarios || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Usu√°rios</p>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-green-600">${stats.total_rodadas || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Rodadas</p>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-purple-600">${stats.total_pratos || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Pratos</p>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-orange-600">${stats.total_avaliacoes || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Avalia√ß√µes</p>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-red-600">${stats.rodadas_ativas || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Rodadas Ativas</p>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div class="text-center">
        <p class="text-2xl font-bold text-yellow-600">${stats.usuarios_7_dias || 0}</p>
        <p class="text-xs text-gray-600 dark:text-gray-400">Novos (7 dias)</p>
      </div>
    </div>
  `;
}

// ========================================================================
// 4. GEST√ÉO DE USU√ÅRIOS
// ========================================================================

async function listarUsuarios() {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üë• Listando todos os usu√°rios...');
    mostrarStatusAdmin('üìã Carregando usu√°rios...', 'info');
    
    const { data: usuarios, error } = await supabase
      .from('vw_admin_usuarios')
      .select('*')
      .order('pontos_totais', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao listar usu√°rios:', error);
      mostrarStatusAdmin('‚ùå Erro ao carregar usu√°rios', 'error');
      return;
    }
    
    renderizarListaUsuarios(usuarios);
    mostrarStatusAdmin(`‚úÖ ${usuarios.length} usu√°rios carregados`, 'success');
    
  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error);
    mostrarStatusAdmin('‚ùå Erro ao listar usu√°rios', 'error');
  }
}

function renderizarListaUsuarios(usuarios) {
  const container = document.getElementById('lista-usuarios');
  if (!container) return;
  
  container.innerHTML = '';
  container.classList.remove('hidden');
  
  usuarios.forEach(usuario => {
    const card = document.createElement('div');
    card.className = 'bg-gray-50 dark:bg-gray-800 p-3 rounded-lg border';
    
    const statusColor = usuario.status_conta === 'ativa' ? 'text-green-600' : 
                       usuario.status_conta === 'suspensa' ? 'text-yellow-600' : 'text-red-600';
    
    card.innerHTML = `
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h4 class="font-bold text-sm">${usuario.nome_completo || 'Sem nome'}</h4>
          <p class="text-xs text-gray-600 dark:text-gray-400">${usuario.email}</p>
          <div class="flex gap-4 mt-2 text-xs">
            <span class="text-blue-600">P: ${(usuario.pontos_totais || 0).toFixed(2)}</span>
            <span class="text-green-600">J: ${usuario.jogos_participados || 0}</span>
            <span class="text-purple-600">V: ${usuario.vitorias || 0}</span>
            <span class="text-orange-600">M: ${(usuario.media_geral || 0).toFixed(2)}</span>
          </div>
          <p class="text-xs ${statusColor} mt-1">Status: ${usuario.status_conta}</p>
        </div>
        <div class="flex gap-1">
          <button onclick="editarUsuario('${usuario.id}')" class="p-1 text-blue-600 hover:bg-blue-100 rounded" title="Editar">
            <span class="material-symbols-outlined text-sm">edit</span>
          </button>
          <button onclick="suspenderUsuario('${usuario.id}')" class="p-1 text-yellow-600 hover:bg-yellow-100 rounded" title="Suspender">
            <span class="material-symbols-outlined text-sm">block</span>
          </button>
          <button onclick="deletarUsuario('${usuario.id}')" class="p-1 text-red-600 hover:bg-red-100 rounded" title="Deletar">
            <span class="material-symbols-outlined text-sm">delete</span>
          </button>
        </div>
      </div>
    `;
    
    container.appendChild(card);
  });
}

// ========================================================================
// 5. GEST√ÉO DE RODADAS
// ========================================================================

async function listarRodadas() {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üéÆ Listando todas as rodadas...');
    mostrarStatusAdmin('üìã Carregando rodadas...', 'info');
    
    const { data: rodadas, error } = await supabase
      .from('rodadas')
      .select('*')
      .order('id', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao listar rodadas:', error);
      mostrarStatusAdmin('‚ùå Erro ao carregar rodadas', 'error');
      return;
    }
    
    renderizarListaRodadas(rodadas);
    mostrarStatusAdmin(`‚úÖ ${rodadas.length} rodadas carregadas`, 'success');
    
  } catch (error) {
    console.error('‚ùå Erro ao listar rodadas:', error);
    mostrarStatusAdmin('‚ùå Erro ao listar rodadas', 'error');
  }
}

function renderizarListaRodadas(rodadas) {
  const container = document.getElementById('lista-rodadas');
  if (!container) return;
  
  container.innerHTML = '';
  container.classList.remove('hidden');
  
  rodadas.forEach(rodada => {
    const card = document.createElement('div');
    card.className = 'bg-gray-50 dark:bg-gray-800 p-3 rounded-lg border';
    
    const statusColor = rodada.status === 'votacao_aberta' ? 'text-green-600' : 
                       rodada.status === 'finalizada' ? 'text-blue-600' : 'text-gray-600';
    
    card.innerHTML = `
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h4 class="font-bold text-sm">${rodada.nome}</h4>
          <p class="text-xs text-gray-600 dark:text-gray-400">ID: ${rodada.id}</p>
          <p class="text-xs ${statusColor} mt-1">Status: ${rodada.status}</p>
          <p class="text-xs text-gray-500 mt-1">Criada: ${new Date(rodada.created_at).toLocaleDateString('pt-BR')}</p>
        </div>
        <div class="flex gap-1">
          <button onclick="editarRodada(${rodada.id})" class="p-1 text-blue-600 hover:bg-blue-100 rounded" title="Editar">
            <span class="material-symbols-outlined text-sm">edit</span>
          </button>
          <button onclick="deletarRodada(${rodada.id})" class="p-1 text-red-600 hover:bg-red-100 rounded" title="Deletar">
            <span class="material-symbols-outlined text-sm">delete</span>
          </button>
        </div>
      </div>
    `;
    
    container.appendChild(card);
  });
}

async function finalizarRodadaForcado() {
  if (!IS_ADMIN) return;
  
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja finalizar a rodada atual FOR√áADAMENTE?\n\nIsso vai finalizar a rodada independente dos votos.');
  
  if (!confirmacao) return;
  
  try {
    console.log('üî® Finalizando rodada for√ßadamente...');
    mostrarStatusAdmin('‚è≥ Finalizando rodada...', 'info');
    
    // Buscar rodada ativa
    const { data: rodadaAtiva, error: errorRodada } = await supabase
      .from('rodadas')
      .select('*')
      .eq('status', 'votacao_aberta')
      .single();
    
    if (errorRodada || !rodadaAtiva) {
      console.log('Erro ao buscar rodada ativa:', errorRodada);
      mostrarStatusAdmin('‚ùå Nenhuma rodada ativa encontrada', 'error');
      return;
    }
    
    console.log('Rodada ativa encontrada:', rodadaAtiva);
    
    // Usar fun√ß√£o SQL para finalizar rodada
    const { error: errorFinalizar } = await supabase.rpc('finalizar_rodada_admin', {
      p_rodada_id: rodadaAtiva.id
    });
    
    if (errorFinalizar) {
      console.error('‚ùå Erro ao finalizar rodada:', errorFinalizar);
      mostrarStatusAdmin(`‚ùå Erro ao finalizar rodada: ${errorFinalizar.message}`, 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Rodada finalizada com sucesso!', 'success');
    
    // Recarregar dashboard e listas
    setTimeout(() => {
      carregarDashboardAdmin();
      listarRodadas();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao finalizar rodada:', error);
    mostrarStatusAdmin(`‚ùå Erro ao finalizar rodada: ${error.message}`, 'error');
  }
}

// ========================================================================
// 5.1. GERA√á√ÉO DE PDF DAS RODADAS
// ========================================================================

async function mostrarModalSelecionarRodadaPDF() {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üìÑ Carregando rodadas finalizadas para PDF...');
    mostrarStatusAdmin('üìã Carregando rodadas finalizadas...', 'info');
    
    // Buscar rodadas finalizadas
    const { data: rodadas, error } = await supabase
      .from('rodadas')
      .select('*')
      .eq('status', 'finalizada')
      .order('id', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao buscar rodadas finalizadas:', error);
      mostrarStatusAdmin('‚ùå Erro ao carregar rodadas', 'error');
      return;
    }
    
    if (rodadas.length === 0) {
      mostrarStatusAdmin('‚ùå Nenhuma rodada finalizada encontrada', 'error');
      return;
    }
    
    // Renderizar lista no modal
    renderizarListaRodadasPDF(rodadas);
    
    // Mostrar modal
    const modal = document.getElementById('modal-selecionar-rodada-pdf');
    if (modal) {
      modal.classList.remove('hidden');
    }
    
    mostrarStatusAdmin(`‚úÖ ${rodadas.length} rodadas finalizadas encontradas`, 'success');
    
  } catch (error) {
    console.error('‚ùå Erro ao carregar rodadas para PDF:', error);
    mostrarStatusAdmin('‚ùå Erro ao carregar rodadas', 'error');
  }
}

function renderizarListaRodadasPDF(rodadas) {
  const container = document.getElementById('lista-rodadas-pdf');
  if (!container) return;
  
  container.innerHTML = '';
  
  rodadas.forEach(rodada => {
    const item = document.createElement('div');
    item.className = 'bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors';
    
    const dataFinalizacao = rodada.finalizada_em ? 
      new Date(rodada.finalizada_em).toLocaleDateString('pt-BR') : 
      new Date(rodada.created_at).toLocaleDateString('pt-BR');
    
    item.innerHTML = `
      <div class="flex justify-between items-center">
        <div>
          <h4 class="font-bold text-sm">${rodada.nome}</h4>
          <p class="text-xs text-gray-600 dark:text-gray-400">Finalizada em: ${dataFinalizacao}</p>
        </div>
        <button onclick="gerarPDFRodada(${rodada.id})" 
                class="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700 transition-colors">
          Gerar PDF
        </button>
      </div>
    `;
    
    container.appendChild(item);
  });
}

async function gerarPDFRodada(rodadaId) {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üöÄ Gerando PDF para rodada:', rodadaId);
    mostrarStatusAdmin('‚è≥ Gerando PDF... (pode demorar alguns segundos)', 'info');
    
    // Fechar modal
    fecharModalPDF();
    
    // Gerar e baixar PDF
    await gerarEDownloadPDFRodada(rodadaId);
    
    mostrarStatusAdmin('‚úÖ PDF gerado e baixado com sucesso!', 'success');
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar PDF:', error);
    mostrarStatusAdmin(`‚ùå Erro ao gerar PDF: ${error.message}`, 'error');
  }
}

function fecharModalPDF() {
  const modal = document.getElementById('modal-selecionar-rodada-pdf');
  if (modal) {
    modal.classList.add('hidden');
  }
}

// ========================================================================
// 6. GEST√ÉO DE CONTE√öDO
// ========================================================================

async function listarPratos() {
  if (!IS_ADMIN) return;
  
  try {
    console.log('üçΩÔ∏è Listando todos os pratos...');
    mostrarStatusAdmin('üìã Carregando pratos...', 'info');
    
    const { data: pratos, error } = await supabase
      .from('pratos')
      .select(`
        *,
        perfis(nome_completo, email),
        rodadas(nome, status)
      `)
      .order('id', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao listar pratos:', error);
      mostrarStatusAdmin('‚ùå Erro ao carregar pratos', 'error');
      return;
    }
    
    renderizarListaPratos(pratos);
    mostrarStatusAdmin(`‚úÖ ${pratos.length} pratos carregados`, 'success');
    
  } catch (error) {
    console.error('‚ùå Erro ao listar pratos:', error);
    mostrarStatusAdmin('‚ùå Erro ao listar pratos', 'error');
  }
}

function renderizarListaPratos(pratos) {
  const container = document.getElementById('lista-pratos');
  if (!container) return;
  
  container.innerHTML = '';
  container.classList.remove('hidden');
  
  pratos.forEach(prato => {
    const card = document.createElement('div');
    card.className = 'bg-gray-50 dark:bg-gray-800 p-3 rounded-lg border';
    
    card.innerHTML = `
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h4 class="font-bold text-sm">${prato.nome_prato}</h4>
          <p class="text-xs text-gray-600 dark:text-gray-400">Por: ${prato.perfis?.nome_completo || 'Desconhecido'}</p>
          <p class="text-xs text-gray-500">Rodada: ${prato.rodadas?.nome || 'N/A'}</p>
          <p class="text-xs text-gray-500">Enviado: ${new Date(prato.data_envio).toLocaleDateString('pt-BR')}</p>
        </div>
        <div class="flex gap-1">
          <button onclick="verPrato('${prato.url_imagem}')" class="p-1 text-blue-600 hover:bg-blue-100 rounded" title="Ver imagem">
            <span class="material-symbols-outlined text-sm">visibility</span>
          </button>
          <button onclick="deletarPrato(${prato.id})" class="p-1 text-red-600 hover:bg-red-100 rounded" title="Deletar">
            <span class="material-symbols-outlined text-sm">delete</span>
          </button>
        </div>
      </div>
    `;
    
    container.appendChild(card);
  });
}

// ========================================================================
// 7. FERRAMENTAS DE MANUTEN√á√ÉO
// ========================================================================

async function recalcularPontos() {
  if (!IS_ADMIN) return;
  
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja recalcular TODOS os pontos?\n\nIsso vai recalcular os pontos de todos os usu√°rios baseado nas avalia√ß√µes recebidas.');
  
  if (!confirmacao) return;
  
  try {
    console.log('üî¢ Recalculando todos os pontos...');
    mostrarStatusAdmin('‚è≥ Recalculando pontos... (pode demorar)', 'info');
    
    // Buscar todas as rodadas finalizadas
    console.log('üîç Buscando rodadas finalizadas...');
    
    const { data: rodadasFinalizadas, error: errorRodadas } = await supabase
      .from('rodadas')
      .select('id, nome, status')
      .eq('status', 'finalizada')
      .order('id', { ascending: true });
    
    console.log('Resposta da busca de rodadas:', { data: rodadasFinalizadas, error: errorRodadas });
    
    if (errorRodadas) {
      console.error('Erro detalhado ao buscar rodadas finalizadas:', errorRodadas);
      console.error('C√≥digo do erro:', errorRodadas.code);
      console.error('Mensagem do erro:', errorRodadas.message);
      console.error('Detalhes do erro:', errorRodadas.details);
      console.error('Hint do erro:', errorRodadas.hint);
      
      mostrarStatusAdmin(`‚ùå Erro ao buscar rodadas: ${errorRodadas.message || errorRodadas.details || 'Erro desconhecido'}`, 'error');
      return;
    }
    
    if (!rodadasFinalizadas || rodadasFinalizadas.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma rodada finalizada encontrada - zerando todos os dados dos usu√°rios');
      mostrarStatusAdmin('‚ö†Ô∏è Nenhuma rodada finalizada encontrada - zerando dados dos usu√°rios', 'info');
      
    // Zerar todos os dados dos usu√°rios quando n√£o h√° rodadas finalizadas
    console.log('üîÑ Tentando zerar dados de todos os usu√°rios...');
    
    const { data: dataZerar, error: errorZerar } = await supabase
      .from('perfis')
      .update({
        pontos_totais: 0,
        jogos_participados: 0,
        vitorias: 0,
        media_geral: 0
      })
      .select('id, nome_completo');
    
    console.log('Resposta da atualiza√ß√£o:', { data: dataZerar, error: errorZerar });
    
    if (errorZerar) {
      console.error('Erro detalhado ao zerar dados dos usu√°rios (m√©todo em lote):', errorZerar);
      console.error('C√≥digo do erro:', errorZerar.code);
      console.error('Mensagem do erro:', errorZerar.message);
      console.error('Detalhes do erro:', errorZerar.details);
      console.error('Hint do erro:', errorZerar.hint);
      
      console.log('üîÑ Tentando m√©todo individual...');
      mostrarStatusAdmin('‚ö†Ô∏è Erro no m√©todo em lote, tentando m√©todo individual...', 'warning');
      
      // Tentar m√©todo individual
      await zerarDadosUsuariosIndividual();
      return;
    }
      
      console.log('‚úÖ Todos os dados dos usu√°rios foram zerados');
      mostrarStatusAdmin('‚úÖ Todos os dados dos usu√°rios foram zerados com sucesso!', 'success');
      
      // Recarregar dashboard e listas
      setTimeout(() => {
        carregarDashboardAdmin();
        listarUsuarios();
      }, 2000);
      
      return;
    }
    
    console.log(`üìä Encontradas ${rodadasFinalizadas.length} rodadas finalizadas`);
    
    // Resetar pontos de todos os usu√°rios
    const { error: errorReset } = await supabase
      .from('perfis')
      .update({
        pontos_totais: 0,
        jogos_participados: 0,
        vitorias: 0,
        media_geral: 0
      });
    
    if (errorReset) {
      console.error('Erro ao resetar pontos:', errorReset);
      mostrarStatusAdmin('‚ùå Erro ao resetar pontos', 'error');
      return;
    }
    
    console.log('‚úÖ Pontos resetados para todos os usu√°rios');
    
    // Recalcular pontos para cada rodada finalizada
    for (const rodada of rodadasFinalizadas) {
      console.log(`üîÑ Recalculando pontos da rodada ${rodada.id} - ${rodada.nome}`);
      
      // Buscar todos os pratos da rodada
      const { data: pratos, error: errorPratos } = await supabase
        .from('pratos')
        .select('id, id_usuario')
        .eq('rodada_id', rodada.id);
      
      if (errorPratos) {
        console.error(`Erro ao buscar pratos da rodada ${rodada.id}:`, errorPratos);
        continue;
      }
      
      if (!pratos || pratos.length === 0) {
        console.log(`‚ö†Ô∏è Nenhum prato encontrado na rodada ${rodada.id}`);
        continue;
      }
      
      // Calcular pontos para cada prato
      for (const prato of pratos) {
        // Buscar avalia√ß√µes do prato
        const { data: avaliacoes, error: errorAvaliacoes } = await supabase
          .from('avaliacoes')
          .select('nota')
          .eq('id_prato', prato.id);
        
        if (errorAvaliacoes) {
          console.error(`Erro ao buscar avalia√ß√µes do prato ${prato.id}:`, errorAvaliacoes);
          continue;
        }
        
        if (!avaliacoes || avaliacoes.length === 0) {
          console.log(`‚ö†Ô∏è Nenhuma avalia√ß√£o encontrada para o prato ${prato.id}`);
          continue;
        }
        
        // Calcular m√©dia do prato
        const somaNotas = avaliacoes.reduce((sum, av) => sum + av.nota, 0);
        const mediaPrato = somaNotas / avaliacoes.length;
        
        console.log(`üìä Prato ${prato.id} - M√©dia: ${mediaPrato.toFixed(2)}`);
        
        // Buscar perfil atual do usu√°rio
        const { data: perfilData, error: errorPerfil } = await supabase
          .from('perfis')
          .select('pontos_totais, jogos_participados, vitorias')
          .eq('id', prato.id_usuario)
          .single();
        
        if (errorPerfil) {
          console.error(`Erro ao buscar perfil do usu√°rio ${prato.id_usuario}:`, errorPerfil);
          continue;
        }
        
        const pontosAtuais = perfilData?.pontos_totais || 0;
        const jogosAtuais = perfilData?.jogos_participados || 0;
        const vitoriasAtuais = perfilData?.vitorias || 0;
        
        // Atualizar pontos do usu√°rio
        const novosPontos = pontosAtuais + mediaPrato;
        const novosJogos = jogosAtuais + 1;
        const novaMedia = novosPontos / novosJogos;
        
        // Verificar se √© vit√≥ria (m√©dia >= 7.0)
        const novasVitorias = mediaPrato >= 7.0 ? vitoriasAtuais + 1 : vitoriasAtuais;
        
        const { error: errorUpdate } = await supabase
          .from('perfis')
          .update({
            pontos_totais: novosPontos,
            jogos_participados: novosJogos,
            vitorias: novasVitorias,
            media_geral: novaMedia
          })
          .eq('id', prato.id_usuario);
        
        if (errorUpdate) {
          console.error(`Erro ao atualizar perfil do usu√°rio ${prato.id_usuario}:`, errorUpdate);
          continue;
        }
        
        console.log(`‚úÖ Usu√°rio ${prato.id_usuario} - Pontos: ${novosPontos.toFixed(2)}, Jogos: ${novosJogos}, M√©dia: ${novaMedia.toFixed(2)}`);
      }
    }
    
    mostrarStatusAdmin('‚úÖ Pontos recalculados com sucesso!', 'success');
    
    // Recarregar dashboard e listas
    setTimeout(() => {
      carregarDashboardAdmin();
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao recalcular pontos:', error);
    mostrarStatusAdmin('‚ùå Erro ao recalcular pontos', 'error');
  }
}

async function zerarDadosUsuarios() {
  if (!IS_ADMIN) return;
  
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja ZERAR os dados de TODOS os usu√°rios?\n\nIsso vai zerar:\n- Pontos totais\n- Jogos participados\n- Vit√≥rias\n- M√©dia geral\n\nEsta a√ß√£o pode ser revertida recalculando os pontos.');
  
  if (!confirmacao) return;
  
  try {
    console.log('üîÑ Zerando dados de todos os usu√°rios...');
    mostrarStatusAdmin('‚è≥ Zerando dados dos usu√°rios...', 'info');
    
    // Primeiro, vamos verificar quantos usu√°rios existem
    const { data: usuariosAntes, error: errorContar } = await supabase
      .from('perfis')
      .select('id, nome_completo, pontos_totais, jogos_participados, vitorias')
      .limit(10);
    
    if (errorContar) {
      console.error('Erro ao contar usu√°rios:', errorContar);
      mostrarStatusAdmin('‚ùå Erro ao verificar usu√°rios', 'error');
      return;
    }
    
    console.log('Usu√°rios encontrados antes da atualiza√ß√£o:', usuariosAntes);
    
    const { data: dataAtualizada, error } = await supabase
      .from('perfis')
      .update({
        pontos_totais: 0,
        jogos_participados: 0,
        vitorias: 0,
        media_geral: 0
      })
      .select('id, nome_completo, pontos_totais, jogos_participados, vitorias');
    
    console.log('Resposta da atualiza√ß√£o:', { data: dataAtualizada, error });
    
    if (error) {
      console.error('Erro detalhado ao zerar dados dos usu√°rios:', error);
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem do erro:', error.message);
      console.error('Detalhes do erro:', error.details);
      console.error('Hint do erro:', error.hint);
      
      mostrarStatusAdmin(`‚ùå Erro ao zerar dados: ${error.message || error.details || 'Erro desconhecido'}`, 'error');
      return;
    }
    
    console.log('‚úÖ Dados de todos os usu√°rios foram zerados');
    mostrarStatusAdmin('‚úÖ Dados de todos os usu√°rios foram zerados com sucesso!', 'success');
    
    // Recarregar dashboard e listas
    setTimeout(() => {
      carregarDashboardAdmin();
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao zerar dados dos usu√°rios:', error);
    mostrarStatusAdmin('‚ùå Erro ao zerar dados dos usu√°rios', 'error');
  }
}

async function zerarDadosUsuariosIndividual() {
  if (!IS_ADMIN) return;
  
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja ZERAR os dados de TODOS os usu√°rios?\n\nIsso vai zerar:\n- Pontos totais\n- Jogos participados\n- Vit√≥rias\n- M√©dia geral\n\nEsta a√ß√£o pode ser revertida recalculando os pontos.');
  
  if (!confirmacao) return;
  
  try {
    console.log('üîÑ Zerando dados de todos os usu√°rios (m√©todo individual)...');
    mostrarStatusAdmin('‚è≥ Zerando dados dos usu√°rios (m√©todo individual)...', 'info');
    
    // Buscar todos os usu√°rios
    const { data: todosUsuarios, error: errorBuscar } = await supabase
      .from('perfis')
      .select('id, nome_completo, pontos_totais, jogos_participados, vitorias');
    
    if (errorBuscar) {
      console.error('Erro ao buscar usu√°rios:', errorBuscar);
      mostrarStatusAdmin('‚ùå Erro ao buscar usu√°rios', 'error');
      return;
    }
    
    if (!todosUsuarios || todosUsuarios.length === 0) {
      mostrarStatusAdmin('‚ùå Nenhum usu√°rio encontrado', 'error');
      return;
    }
    
    console.log(`üìä Encontrados ${todosUsuarios.length} usu√°rios para atualizar`);
    
    let sucessos = 0;
    let erros = 0;
    
    // Atualizar cada usu√°rio individualmente
    for (const usuario of todosUsuarios) {
      try {
        const { error: errorUpdate } = await supabase
          .from('perfis')
          .update({
            pontos_totais: 0,
            jogos_participados: 0,
            vitorias: 0,
            media_geral: 0
          })
          .eq('id', usuario.id);
        
        if (errorUpdate) {
          console.error(`Erro ao atualizar usu√°rio ${usuario.id} (${usuario.nome_completo}):`, errorUpdate);
          erros++;
        } else {
          console.log(`‚úÖ Usu√°rio ${usuario.id} (${usuario.nome_completo}) atualizado com sucesso`);
          sucessos++;
        }
      } catch (error) {
        console.error(`Erro inesperado ao atualizar usu√°rio ${usuario.id}:`, error);
        erros++;
      }
    }
    
    console.log(`üìä Resultado: ${sucessos} sucessos, ${erros} erros`);
    
    if (erros === 0) {
      mostrarStatusAdmin(`‚úÖ Todos os ${sucessos} usu√°rios foram atualizados com sucesso!`, 'success');
    } else if (sucessos > 0) {
      mostrarStatusAdmin(`‚ö†Ô∏è ${sucessos} usu√°rios atualizados, ${erros} erros`, 'warning');
    } else {
      mostrarStatusAdmin('‚ùå Erro ao atualizar usu√°rios', 'error');
    }
    
    // Recarregar dashboard e listas
    setTimeout(() => {
      carregarDashboardAdmin();
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao zerar dados dos usu√°rios:', error);
    mostrarStatusAdmin('‚ùå Erro ao zerar dados dos usu√°rios', 'error');
  }
}

async function limparDados() {
  if (!IS_ADMIN) return;
  
  const confirmacao = confirm('üö® ATEN√á√ÉO: Tem certeza que deseja LIMPAR TODOS OS DADOS?\n\nIsso vai apagar:\n- Todos os pratos\n- Todas as avalia√ß√µes\n- Todas as rodadas\n- Todos os perfis\n\n‚úÖ SEUS DADOS DE ADMIN SER√ÉO PRESERVADOS!\n\nEsta a√ß√£o N√ÉO PODE ser desfeita!');
  
  if (!confirmacao) return;
  
  const confirmacao2 = confirm('üö® √öLTIMA CONFIRMA√á√ÉO!\n\nDigite "CONFIRMAR" no pr√≥ximo prompt para continuar.');
  
  if (!confirmacao2) return;
  
  try {
    console.log('üóëÔ∏è Limpando todos os dados (preservando admins)...');
    mostrarStatusAdmin('‚è≥ Limpando dados... (preservando administradores)', 'info');
    
    const { error } = await supabase.rpc('limpar_todos_dados');
    
    if (error) {
      console.error('Erro ao limpar dados:', error);
      mostrarStatusAdmin('‚ùå Erro ao limpar dados', 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Dados limpos com sucesso! (Administradores preservados)', 'success');
    
    // Recarregar dashboard
    setTimeout(() => {
      carregarDashboardAdmin();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error);
    mostrarStatusAdmin('‚ùå Erro ao limpar dados', 'error');
  }
}

// ========================================================================
// 8. FUN√á√ïES AUXILIARES
// ========================================================================

function mostrarStatusAdmin(mensagem, tipo = 'info') {
  const statusEl = document.getElementById('admin-status');
  if (!statusEl) return;
  
  const cores = {
    info: 'text-blue-600',
    success: 'text-green-600',
    error: 'text-red-600',
    warning: 'text-yellow-600'
  };
  
  statusEl.innerHTML = `<p class="${cores[tipo] || cores.info} font-bold">${mensagem}</p>`;
  
  // Limpar ap√≥s 5 segundos
  setTimeout(() => {
    statusEl.innerHTML = '';
  }, 5000);
}

// ========================================================================
// 9. FUN√á√ïES GLOBAIS (para os bot√µes onclick)
// ========================================================================

// Fun√ß√µes que ser√£o chamadas pelos bot√µes onclick
window.editarUsuario = async function(userId) {
  console.log('Editar usu√°rio:', userId);
  
  // Buscar dados do usu√°rio
  const { data: usuario, error } = await supabase
    .from('perfis')
    .select('*')
    .eq('id', userId)
    .single();
  
  if (error) {
    mostrarStatusAdmin('‚ùå Erro ao buscar dados do usu√°rio', 'error');
    return;
  }
  
  // Criar modal de edi√ß√£o
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
      <h3 class="text-lg font-bold mb-4">Editar Usu√°rio</h3>
      <div class="space-y-3">
        <div>
          <label class="block text-sm font-medium mb-1">Nome:</label>
          <input type="text" id="edit-nome" value="${usuario.nome_completo || ''}" 
                 class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Email:</label>
          <input type="email" id="edit-email" value="${usuario.email || ''}" 
                 class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Pontos:</label>
          <input type="number" step="0.01" id="edit-pontos" value="${usuario.pontos_totais || 0}" 
                 class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Status:</label>
          <select id="edit-status" class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
            <option value="ativa" ${usuario.status_conta === 'ativa' ? 'selected' : ''}>Ativa</option>
            <option value="suspensa" ${usuario.status_conta === 'suspensa' ? 'selected' : ''}>Suspensa</option>
            <option value="banida" ${usuario.status_conta === 'banida' ? 'selected' : ''}>Banida</option>
          </select>
        </div>
      </div>
      <div class="flex gap-2 mt-4">
        <button onclick="salvarEdicaoUsuario('${userId}')" 
                class="flex-1 bg-blue-600 text-white p-2 rounded hover:bg-blue-700">
          Salvar
        </button>
        <button onclick="fecharModal()" 
                class="flex-1 bg-gray-400 text-white p-2 rounded hover:bg-gray-500">
          Cancelar
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
};

window.suspenderUsuario = async function(userId) {
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja suspender este usu√°rio?\n\nEle n√£o poder√° mais acessar o sistema.');
  
  if (!confirmacao) return;
  
  try {
    mostrarStatusAdmin('‚è≥ Suspendo usu√°rio...', 'info');
    
    const { error } = await supabase.rpc('alterar_status_usuario', {
      user_id: userId,
      novo_status: 'suspensa'
    });
    
    if (error) {
      console.error('Erro ao suspender usu√°rio:', error);
      mostrarStatusAdmin('‚ùå Erro ao suspender usu√°rio', 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Usu√°rio suspenso com sucesso!', 'success');
    
    // Recarregar lista de usu√°rios
    setTimeout(() => {
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('Erro ao suspender usu√°rio:', error);
    mostrarStatusAdmin('‚ùå Erro ao suspender usu√°rio', 'error');
  }
};

window.deletarUsuario = async function(userId) {
  const confirmacao = confirm('üö® ATEN√á√ÉO: Tem certeza que deseja DELETAR este usu√°rio?\n\nIsso vai apagar:\n- Todos os pratos do usu√°rio\n- Todas as avalia√ß√µes\n- O perfil completo\n\nEsta a√ß√£o N√ÉO PODE ser desfeita!');
  
  if (!confirmacao) return;
  
  const confirmacao2 = confirm('üö® √öLTIMA CONFIRMA√á√ÉO!\n\nDigite "CONFIRMAR" no pr√≥ximo prompt para continuar.');
  
  if (!confirmacao2) return;
  
  try {
    mostrarStatusAdmin('‚è≥ Deletando usu√°rio...', 'info');
    
    const { error } = await supabase.rpc('deletar_usuario_completo', {
      user_id: userId
    });
    
    if (error) {
      console.error('Erro ao deletar usu√°rio:', error);
      mostrarStatusAdmin('‚ùå Erro ao deletar usu√°rio', 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Usu√°rio deletado com sucesso!', 'success');
    
    // Recarregar lista de usu√°rios
    setTimeout(() => {
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('Erro ao deletar usu√°rio:', error);
    mostrarStatusAdmin('‚ùå Erro ao deletar usu√°rio', 'error');
  }
};

window.editarRodada = async function(rodadaId) {
  console.log('Editar rodada:', rodadaId);
  
  // Buscar dados da rodada
  const { data: rodada, error } = await supabase
    .from('rodadas')
    .select('*')
    .eq('id', rodadaId)
    .single();
  
  if (error) {
    mostrarStatusAdmin('‚ùå Erro ao buscar dados da rodada', 'error');
    return;
  }
  
  // Criar modal de edi√ß√£o
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
      <h3 class="text-lg font-bold mb-4">Editar Rodada</h3>
      <div class="space-y-3">
        <div>
          <label class="block text-sm font-medium mb-1">Nome:</label>
          <input type="text" id="edit-rodada-nome" value="${rodada.nome || ''}" 
                 class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Status:</label>
          <select id="edit-rodada-status" class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600">
            <option value="votacao_aberta" ${rodada.status === 'votacao_aberta' ? 'selected' : ''}>Vota√ß√£o Aberta</option>
            <option value="finalizada" ${rodada.status === 'finalizada' ? 'selected' : ''}>Finalizada</option>
            <option value="proxima" ${rodada.status === 'proxima' ? 'selected' : ''}>Pr√≥xima</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">ID:</label>
          <input type="text" id="edit-rodada-id" value="${rodada.id}" disabled
                 class="w-full p-2 border rounded bg-gray-100 dark:bg-gray-600 dark:border-gray-600">
        </div>
      </div>
      <div class="flex gap-2 mt-4">
        <button onclick="salvarEdicaoRodada(${rodadaId})" 
                class="flex-1 bg-blue-600 text-white p-2 rounded hover:bg-blue-700">
          Salvar
        </button>
        <button onclick="fecharModal()" 
                class="flex-1 bg-gray-400 text-white p-2 rounded hover:bg-gray-500">
          Cancelar
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
};

window.salvarEdicaoRodada = async function(rodadaId) {
  const nome = document.getElementById('edit-rodada-nome').value;
  const status = document.getElementById('edit-rodada-status').value;
  
  try {
    mostrarStatusAdmin('‚è≥ Salvando altera√ß√µes...', 'info');
    
    // Atualizar rodada
    const { error } = await supabase
      .from('rodadas')
      .update({
        nome: nome,
        status: status
      })
      .eq('id', rodadaId);
    
    if (error) {
      console.error('Erro ao atualizar rodada:', error);
      mostrarStatusAdmin(`‚ùå Erro ao salvar altera√ß√µes: ${error.message}`, 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Rodada atualizada com sucesso!', 'success');
    fecharModal();
    
    // Recarregar lista de rodadas
    setTimeout(() => {
      listarRodadas();
    }, 2000);
    
  } catch (error) {
    console.error('Erro ao salvar rodada:', error);
    mostrarStatusAdmin('‚ùå Erro ao salvar altera√ß√µes', 'error');
  }
};

window.deletarRodada = async function(rodadaId) {
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja DELETAR esta rodada?\n\nIsso vai apagar:\n- Todos os pratos da rodada\n- Todas as avalia√ß√µes\n- A rodada completa\n\nEsta a√ß√£o N√ÉO PODE ser desfeita!');
  
  if (!confirmacao) return;
  
  try {
    console.log('üóëÔ∏è Tentando deletar rodada:', rodadaId);
    mostrarStatusAdmin('‚è≥ Deletando rodada...', 'info');
    
    const { data, error } = await supabase.rpc('deletar_rodada_completa', {
      p_rodada_id: rodadaId
    });
    
    console.log('Resposta da fun√ß√£o:', { data, error });
    
    if (error) {
      console.error('Erro detalhado ao deletar rodada:', error);
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem do erro:', error.message);
      console.error('Detalhes do erro:', error.details);
      console.error('Hint do erro:', error.hint);
      
      mostrarStatusAdmin(`‚ùå Erro ao deletar rodada: ${error.message || error.details || 'Erro desconhecido'}`, 'error');
      return;
    }
    
    console.log('‚úÖ Rodada deletada com sucesso!');
    mostrarStatusAdmin('‚úÖ Rodada deletada com sucesso!', 'success');
    
    // Recarregar lista de rodadas e dashboard
    setTimeout(() => {
      listarRodadas();
      carregarDashboardAdmin();
    }, 2000);
    
  } catch (error) {
    console.error('Erro inesperado ao deletar rodada:', error);
    mostrarStatusAdmin(`‚ùå Erro inesperado: ${error.message}`, 'error');
  }
};

window.verPrato = function(urlImagem) {
  console.log('Ver prato:', urlImagem);
  
  // Criar modal de imagem
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black/90 flex items-center justify-center z-50';
  modal.innerHTML = `
    <div class="relative max-w-4xl max-h-full p-4">
      <button onclick="fecharModalImagem()" 
              class="absolute top-2 right-2 text-white text-4xl hover:text-gray-300 z-10">
        <span class="material-symbols-outlined">close</span>
      </button>
      <img src="${urlImagem}" alt="Prato" class="max-w-full max-h-full object-contain rounded-lg">
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Fechar com ESC
  const handleEsc = (e) => {
    if (e.key === 'Escape') {
      fecharModalImagem();
      document.removeEventListener('keydown', handleEsc);
    }
  };
  document.addEventListener('keydown', handleEsc);
};

window.fecharModalImagem = function() {
  const modal = document.querySelector('.fixed.inset-0.bg-black\\/90');
  if (modal) {
    modal.remove();
  }
};

window.deletarPrato = async function(pratoId) {
  const confirmacao = confirm('‚ö†Ô∏è Tem certeza que deseja DELETAR este prato?\n\nIsso vai apagar:\n- Todas as avalia√ß√µes do prato\n- O prato completo\n\nEsta a√ß√£o N√ÉO PODE ser desfeita!');
  
  if (!confirmacao) return;
  
  try {
    mostrarStatusAdmin('‚è≥ Deletando prato...', 'info');
    
    const { error } = await supabase.rpc('deletar_prato_completo', {
      prato_id: pratoId
    });
    
    if (error) {
      console.error('Erro ao deletar prato:', error);
      mostrarStatusAdmin('‚ùå Erro ao deletar prato', 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Prato deletado com sucesso!', 'success');
    
    // Recarregar lista de pratos
    setTimeout(() => {
      listarPratos();
    }, 2000);
    
  } catch (error) {
    console.error('Erro ao deletar prato:', error);
    mostrarStatusAdmin('‚ùå Erro ao deletar prato', 'error');
  }
};

// Fun√ß√µes auxiliares para modais
window.salvarEdicaoUsuario = async function(userId) {
  const nome = document.getElementById('edit-nome').value;
  const email = document.getElementById('edit-email').value;
  const pontos = parseFloat(document.getElementById('edit-pontos').value);
  const status = document.getElementById('edit-status').value;
  
  try {
    mostrarStatusAdmin('‚è≥ Salvando altera√ß√µes...', 'info');
    
    // Atualizar perfil
    const { error: errorPerfil } = await supabase
      .from('perfis')
      .update({
        nome_completo: nome,
        email: email,
        pontos_totais: pontos,
        status_conta: status
      })
      .eq('id', userId);
    
    if (errorPerfil) {
      console.error('Erro ao atualizar perfil:', errorPerfil);
      mostrarStatusAdmin('‚ùå Erro ao salvar altera√ß√µes', 'error');
      return;
    }
    
    mostrarStatusAdmin('‚úÖ Usu√°rio atualizado com sucesso!', 'success');
    fecharModal();
    
    // Recarregar lista de usu√°rios
    setTimeout(() => {
      listarUsuarios();
    }, 2000);
    
  } catch (error) {
    console.error('Erro ao salvar usu√°rio:', error);
    mostrarStatusAdmin('‚ùå Erro ao salvar altera√ß√µes', 'error');
  }
};

window.fecharModal = function() {
  const modal = document.querySelector('.fixed.inset-0.bg-black\\/50');
  if (modal) {
    modal.remove();
  }
};

// Fun√ß√£o global para gerar PDF (chamada pelos bot√µes onclick)
window.gerarPDFRodada = gerarPDFRodada;

// ========================================================================
// 10. EXPORTAR FUN√á√ïES PRINCIPAIS
// ========================================================================

export {
  verificarPermissoesAdmin,
  inicializarPainelAdmin,
  carregarDashboardAdmin
};
